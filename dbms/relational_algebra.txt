Relational ALgebra and Relational Calculus:
    -- A data model must include a set of operations to manipulate the database, in adition to the data models concept for defining the databases structure and constraints.
    -- The basic set of operations for the formal relational model is the relational algebra.
    -- A sequence of relational algebra operations frms a relational algebra expression, wojse result will also be a relation that represents the resilt of a database query.
    -- The algebra defines a set of operations for the relational model, the relational calculus provides a higher level declarative language for specifying relational queries.

Unary Relational Operations: SELECT and PROJECT
1. SELECT:
    -- The select operation is used to choose a subset of tuples from a reltion that satisfies a selection condition,.
    -- The general form of SELECT Operation:
            sigma(condition, R)
            -- sigma is used to denote the SELECT operation and 
            -- the selection condition is a boolean expression specified on the attributs of relation R
    -- The relation resulting from the SELECT operations has the same attributes as R. Thus the degree(sigma(R)) == degree(R)
    -- The number of tuples in the resulting relation is always less than or equal to the number of tuples in R. Thus |sigma(R)| <= |R|
    -- The fraction of tuples selected by the selection condition is referred to as the selectivity of the selection condition.
    -- Selection is commutative:
        sigma(c1, sigma(c2, R)) == sigma(c2, sigma(c1, R))
    -- SELECT operations can be cascaded using AND.

2. PROJECT:
    -- The PROJECT operation, selects certain columns from the table and discards the other columns.
    -- If we are interested in only certain attributes of a relation, we use the PROJECT operation to project the relation over these attributes only.
    -- The general form of the PROJECT operation is 
            pi(attr_list, R)
            -- pi is the symbol used to represent the PROJECT operation
            -- attr_list is the sublist of attributes from attributes of relation R.
    -- The result of the PROJECT operation has only the attributes specified in the attr_list in the same order as specified in the list.
    -- degree(pi(attr_list, R)) == degree(R)
    -- The PROJECT operation when applied on a set of attributes that do not form any super key, then the result may contain duplicate tuples.
    -- The PROJETC operation removes any duplicate tuples, so the result of the {ROJECT operation is a set of distinct tuples, and hence a valid relation.
    -- |pi(attr, R)| <= |R|
    -- pi(list1, pi(list2, R)) == pi(list1, R), iff list1 is a sublist of list2

3. RENAME:
    -- In general for most queries we need to apply several relational algebra operation one after the other. 
    -- Either we write the operations as a sinlge relational algebra expression by nesting the operations, or we can apply one operation at a time and create intermediate result relations.
    -- In the latter case, we must give the names to the relations that hold the intermediate results.
    -- The general form of RENAME operation when applied to a relation R of degree n is denoted by any of the following forms
            rho(relation_name, attr_name, R) /
            rho(relation_name, R) /
            rho(attr_name, R)
            
            -- rho symbol is used to denote the RENAME operator, 
            -- relation_name is the new relation name 
            -- attr_name is the list of new attribute names.


Set Operations:
1. UNION, INTERSECTION, and MINUS:
    -- Several set theoretic operations are used to merge the elements of two sets in various ways including UNION, INTERSECTION, and SET DIFFERENCE.
    -- These are binary operations; that is, each applied to two sets.
    -- When these operations are adapted to relational databases, the two relations on which these operations are applied must be type compatible.
    -- Two relations R1 and R2 are said to be type compatible if they have the same degree n and the corresponding attributes have the same domain.
    -- UNION: The result of this operation, denoted by R U S, is a relation that includes the tuples that are either in R or in S or in both.
    -- INTERSECTION: The result of this operation, is a relation that includes all the tuples that are in both R and S
    -- SET DIFFERENCE: The result of this operation denpted by R-S, contains all the tuples in R that are not in S.
    -- Notice that UNION and INTERSECTION are commutative, and associative. >> CAn be executed in any order.
    -- SET DIFFERENCE operation is not commutative.

2. CARTESIAN PRODUCT (CROSS PRODUCT):
    -- Is also a binary operation, but the relations on which it is applied do not have to be union compatible.
    -- In its binary form, this set operation produces a new relation by combining every tuple in one relation with every tuple in other relation.
    -- In general R(A1,.., An) X S(B1,.., Bm) is a relation with degree = m+n, and the resulting relation has one tuple for each combination of tuples. Thus the total number of tuples = |R| * |S|
    -- The CROSS PRODUCT operation by itself is meaningless. It is mostly useful when followed by a selection that matches value of attributes coming from the component relations.
    -- Because this sequence of CROSS PRODUCT followed by SELECT operation is commonly used, a special operation called JOIN was created to specify this sequence of operations.

Complete Set of Relational Algebra Operations:
    -- It has been shown that the set of relaltional algebra operations 
        {SELECT, PROJECT, UNION, RENAME, SET DIFFERENCE, CROSS PRODUCT}
        is a complete set.
    -- Any other relational algrbra operation can be expressed as a sequence of operations from this set.

JOIN Operation:
    -- The JOIN operation is used to combine the related tuples from two relations. This operation is very important for any relational database with more than a single relation because it allows us to process relationships among relations.
    -- The JOIN operation can be specified as a CARTESIAN PRODUCT operation followed by a SELECT operation.
    -- The general form of JOIN operations consists of two relations
        R(A1, .., An) and S(B1, .., Bn) and a join condition.
    -- The resultant relation has n+m attributes and has one tuple for each combination of tuples whenever the combination satisfies the join condition.
    
    EQUIJOIN and NATURAL JOIN:
        -- The most common use of the JOIN involves a join conditions with equality.
        -- Such a JOIN, where the only comparison operator used is equality is called an EQUIJOIN.
        -- Notice that in the result of an EQUIJOIN we always have one or more pairs of attributes that have identical values in every tuple.
        -- Because one of each pairs of attributes with identical values is superflous, a new operation called NATURAL JOIN was created to get rid of the second attribute in EQUIJOIN
        -- The standard definition of NATURAL JOIN requires that the two join attributes have the same name in both relations. If this is not the case, a renaming operations is applied first.
        -- In general the join condition for NATURAL JOIN is constructed by equating each pair of join attributes that have the same name in the two relations and combining these conditions with AND.
        -- There can be a list of join attributes from each relation, and each corresponding pair must have the same name.

