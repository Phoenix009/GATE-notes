Relational Model:
	-- The relational model represents the database as a collection of relations. Informally each relation resembles a table of values or to some extent a flat file of records. 
	-- When a relation is thought of as a table of values, each row represents a fact that typically corresponds to a real-world entity or a relationship.
	-- In the formal relational model terminology, a row is called a tuple, a column header is called an attribute and the table is called the relation.

Domains Attributes, Tuples and Relations:
	Domain:
		-- A domain D is a set of atomic values. By atomic we mean that each value in the domain is indivisible as far as the formal relational model is concerned.

	Relation Schema:	
		-- A relation schema R denoted by R(A1, A2, ... An) is made up of a relation name R and a list of attributes A1, A2.., 
		-- Each attribute Ai is the name of the role played by some domain in the relation schema R.
		-- D is called the domain of Ai and is denoted by dom(Ai). 
		-- A relation schema is used to describe a relation. 
		-- The degree of the relation is the number of attributes of its relation schema.

	Relation:
		-- A relation of the relation schema R(A1, A2, .. An), also denoted by r(R) is a set of n-tuples, 
		-- Each tuple is an ordered list of n values <v1, v2, .., vn> where each value vi is an element from dom(Ai) or is a special NULL value.  

		-- Definition of relation can also be stated more formally using set theory. A relation is a mathematical relation of degree n, which is a subset of the Cartesian product of the domains that define R.
		-- r(R) is a subset of (dom(A1) x dom(A2) x ... x dom(An))

	Characteristics of a Relation:
		Ordering of tuples in a relation:
			A relation is defined as a set of tuples. Mathematically, elements of a set have no order among them; hence the tuples in a relation do not have any particular order. In other words the relation is insensitive to the ordering of tuples.

		Ordering of values within a tuple:
			According to the definition of a relation, an n-tuple is an ordered list of n values, so the ordering of the values in a tuple and hence of the attributes in a relation schema is important.

		Values and NULLs in the tuples:
			Each value in a tuple is an atomic value; that is it is not divisible into components within the framework of the basic relational model.
			An important concept is that of NULL values, which are used to represent the values of attributes that may be unknown or may not apply to a tuple. A special values called NULL, is used in these cases.

	Relational Model Notation:
		-- A relation schema R of degree n is dented by R(A1, A2, ..., An)
		-- The uppercase letters are used to denote relation names.
		-- the lowercase letters are used to denote relation states.
		-- in general the name of the relation also indicates the current set of tuples in that relation - current relation state.
		-- An attribute A can be qualified with the relation name R to which it belongs by using the dot notation. 'R.A'
		-- A n-tuple in the realation r(R) is denoted by t=<v1, v2, ... , vn>, where vi is the value that corresponds to the attribute Ai in the relation. the following notation refers to the component values in the tuple:
			1. t[Ai] and t.Ai refer the value of vi in t for attribute Ai

Relational Model Constraints and Relational Database Schemas:
	Constraints on databases can generally be divided into three main categories.
	1. Constraints that are inherent in the data model. We call these inherent model based constraints or implicit constraints. The characteristics of relations that we discussed earlier are inherent constraints of the relational model and belong to this category.

	2. Constraints that can be directly expressed in the schemas of the data model, typically by specifying them in DDL. We call these schema based constraints or explicit constraints. The constraints that will be dicussed in this section are of the second category, that can be expressed in the schema of the relation model via the DDL.
	
	3. Constraints that cannot be directly expressed in the schemas of the data model, and hence must be expressed and enforces by the application programs or in some other way. We call these application based or semantic constraints or business rules. These constraints are difficult to express and enforce within the data model, so they are usually checked within the application programs that perform database updates

	1. Domain Constraints:
		-- The domain constraints specify within each tuple the value of each attribute A must be an atomic value in the domain dom(A).

	2. Key constraints:
		-- Usually there are subset of attributes of a relation schema R with the property that no two tuples in any relation state r of R should have the same combination of values for these attributes.
		-- Any such set of attributes is called a super key of the raltion schema R. A super key specifies a uniqueness constraint that no two tuples in the relation can have the same values for super key.
		-- A key k for a relation schema r is defined by the following two properties:
			1. Two distinct tuples in any state of the relation cannot have the same values for all the attributes in the key.
			2. It is a minial superkey that is, a superkey from which we cannot remove any attribute and still have the uniqueness property hold.
		-- A key is a super key but not vice versa. A super key can be a key iff it is minimal.
		-- in general, a relation schema may have more than one key. In this case each of the keys is called a candidate key.
		-- It is common to designate one of the candidate keys as an primary key of the relation. This is the candidate key whose values will be used to identify tuples in the relation.

	3. Entity Integrity Constraints:
		-- The entity integrity constraint states that no primary key value can be NULL. This is because the primary key value is used to identify individual tuples in a relation.

	4. Referential Integrity Constraint:
		-- The referential integrity constraint is specified between two relations and is used to maintain the consistency among tuples in the two relations.
		-- Informally the referential integrity constraint states that a tuple in one relation that refers to another relation must refer to an existing tuple in that relation.
		--  To define referential integrity more formally we define the concept of a foreign key
		-- A set of attributes in the relation schema R1 is a foreign key of R1 that referneces relation R2 if it satisfies the following rules:
			1. The attribute in FK have the same domain as the primary key attributes of R2
			2. A value of FK in the tuple t1 of the relation R1 either occurs with the PK value of tuple t2 in the relation R2 or is NULL. In the former case we say that the tuple t1 references the tuple t2.
		-- In this definiont, R1 is called the referencing relation and R2 is called the referenced relation. If these two conditions hold then referential integrity constraints from R1 to R2 is said to hold.
	
	NOTE:
		-- The schema-based constraints include domain constraints, key constraints, constraints on NULLs, entity integrity constraint and referential integrity constraints.
		-- All integrity constraints should be specified on the relational database schema if we want the DBMS to enforce these constraints on the database.
		-- The DDL includes provision to specify the various constraints so that DBMs can automatically enforce them.

Update Operations, Transactions and Dealing with Constraint Violations:
	-- There are three basic operations that can change the state of the relations in the database: Insert, Delete and Update.
	-- Insert is used to add one or more tuples in a relation. Delete is used to delete tuples and update or modify is used to change the values of some attributes in existing tuples.
	-- In this section we discuss the types of constraints that may be violated by each of these operations and the types of actions that may be taked if an operation causes a violation.

	The Insert operation:
		-- Domain Constraints can be violated if an attribute value does not belong to its domain.
		-- Key constraints can be violated if the key value in the new tuple already exists.
		-- Entity Integrity constraints can be violated if the key value of the new tuple is assigned NULL.
		-- Referential Integrity constraint can be violated if the tuple refers to a tuple from another relation that dows not exists.
		-- If an insetion violates one or more constraints, the default option is to reject the insertion.

 	The Delete Operation:
 		-- The Delete operation can violate only referential integrity constraint. This occurs if the tuple being deleted is referenced by tuples from another relation in the database.
 		-- Several options are available if a deletion operation causes a violation.
 		-- The first option is to RESTRICT/reject the deletion.
 		-- The second option is called CASCADE where we attempt to delete the tuples that reference the tuple being deleted.
 		-- The third option is to SET DEFAULT value to the referencing attribute; each such value is either set to NULL or changed to refer a default valid tuple. Notice that if the attribute is defaulted to NULL then it is possible that it may violate entity integrity constraint.

 	The Update Operation:
 		-- The update operation is used to change the values of one or more attributes in a tuple of a relation.
 		-- Updating an attribute that is neither a part of a primary key nor is a part of foreign key, usually creates no problem and we only need to chack if the new values obey domain constraints.
 		-- Modifying a primary key values is simpilar to deleting one tuple and inserting another tuple. Hence the issues discussed earlier come into play.
