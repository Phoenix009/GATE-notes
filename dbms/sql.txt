Schema and Catalog in SQL:
    -- The concept of an SQL schema was incorporated starting with SQL2 in order to group tables and other constructs that belong to the same database application
    -- An SQL schema is identified by a schema name and includes authorization identifier to indicate the user who owns the schema
    -- It also includes descriptors for each element in the schema.
    -- Schema elements includes tables, types, constraints, views, domains and other constructs that describe the schema.
    -- Schema is creter using the CREATE SCHEMA statement, which can include all the schema elements defintion.
    -- Alternatively the schema can be assigned name and authorization identifier and the elements can be defined later.
        CREATE SCHEMA <schema-name> AUTHORIZATION <auth-identifier>;
    -- Not all users are authorized to create schema and schema elements.
    -- This privilege must e explicitly granted to the relevant users by the DBA.
    
    -- SQL uses the conept of a catalog which is a named collection of schemas
    -- catalog contains a special schema called INFORMATION_SCHEMA, which provide the infor on all the schemas in the catalog and all the element descriptors in these schemas.

CREATE TABLE:
    -- The CREATE TABLE command is used to specify a new relation by giving it a name and specifying its attributrs and initial constraints.
            CREATE TABLE <table-name> (
                <attr-1> <data-type> <constraints>, ...
                <attr-k> <data-type> <constraints>, 
            );
    -- The relations declared through CREATE TABLE statements are called base tables and are distinguished from virtual relations, creted through the CREATE VIEW which may or may not correspond to an actual physical file.
    -- The attributes in a base tables are considered to be ordered in the sequence in which they are specified in the CREATE TABLE statement.

    -- Attribute Data types and Domains in SQL:
        1. Numeric:
            -- Interger numbers of various sizes: INTEGER/INT, SMALLINT
            -- Float numbers of various precision: FLOAT/REAL, DOUBLE PRECISION
            -- Formatted numbers: DECIMAL(i, j)/DEC(i, j)/NUMERIC(i, j)
                    i - decimal digits.
                    j - the numeber of digits after the decimal.
        2. Character String:
            -- Fixed Length: CHAR(n) or CHARACTER(n)
            -- Varying Length: VARCHAR(n) / CHAR VARYING(n) / CHARACTER VARYING(n)
                n - Maximum Length
            -- CLOB - CHARACTER LARGE OBJECT. maximum size can be specified in Kbs(K), Mbs(M) or Gbs(G)
            -- Literal Strings are enclosed using single quotation marks.
        3. BitString:
            -- Fixed Length: BIT(n)
            -- Variale Length: BIT VARYING(n)
            -- BLOB - BINARY LARGE OBJECT. maximum size same as CLOB
            -- Literals are enclosed in single quotation marks and preceeded with 'B' to distinguish them from the string literals, B'100101'
        4. Boolean:
            -- datatype has traditional values of TRUE and FALSE.
            -- In SQL due to the resence of NULL, a three values logic is used, so a third possible values is UNKNOWN
        5. Date:
            -- The DATE data type has ten position and its components are YEAR, MONTH and DAY in the form YYYY-MM-DD.
            -- The TIME data type has atleast eight positions with components HOUR, MINUTE and SECOND in the form HH:MM:SS
            -- An earlier dats is considered smaller than the later date and similar is for time.
            -- Literal values are represented by a single quoted strings preceded by the keyword DATE or TIME
            -- A TIME WITH TIME ZONE data type includes an additional six positions for specifying the displacement from thr standard universal time zonem which is in the range of +13:00 to -12:59

Specifying Consraints in SQL:
    1. Attribute Constraints and Attribute Defaults:
        NOT NULL:
            -- Because SQL allows NULLs as attribute calues, constraint NOT NULL may be specified if NULL is not permitted for a particular attribute.
            -- This constraint is implicitly defined for the attributes that are part of the primary key of each relation.

        DEFAULT:
            -- It is possible to define a default value for an attribute by appending the clause DEFAULT <default-value> to an attribute definition.
            -- The default value is defined in any tuple if an explicit value is not provided for that attribute. 
            -- If no default calues is specified, the default default value is NULL for attributes that do not have the NOT NULL constraint.
            -- dept_number INT DEFAULT 1

        CHECK:
            -- CHECK is a domain constraint and can restrict the domain values that can be assigned for an attribute.
            -- dept_number INT NOT NULL CHECK(dept_number > 0 AND dept_number < 21)

    2. Specifying Key and Referential Integrity Constraints:
        PRIMARY KEY:
            -- The primary key clause specified one or more attributes that make up the primary key of a relation.
            -- If a primary key has a single attribute, the clause can follow the attribute defintion.
            -- dept_number INT PRIMARY KEY
        UNIQUE:
            -- The UNIQUE clause specified alternate unique keys, also known as candidatekeys
            -- The UNIQUE clause can also be specified directly for a unique key if it is a single attribute, as in the following example:
            -- dname VARCHAR(15) UNIQUE.
        FOREIGN KEY:
            -- Referential integrity is specified via the FOREIGN KEY clause.
                -- FOREIGN KEY(Dnumber) REFERENCES DEPARTMENT(Dnumber);
            -- A referential itegrity constraint can be violated when tuples are inserted or deleted, or when the foreign or primary key values are updated.
            -- Default action taken by SQL for any integrity violation is to reject the update which is known as RESTRICT.
            -- However, the schema designer can specify an alternative action to be taken by attaching a referential trigerred action clause to any foreign keey constraint.
            -- the options include SET NULL, CASCADE and SET DEFAULT.
                -- FOREIGN KEY(Dnumber) REFERENCES DEPARTMENT(Dnumber) ON DELETE SET DEFAULT ON UPDATE CASCADE;

Basic Retrieval Queries in SQL:
    -- SQL has one basic statement for retrieving information from a database: the SELECT statement.
    -- the SELECT statement is not the same as the SELECT operation of Relational Algebra.
    
    1. SELECT-FROM-WHERE Structure:
        -- The basic form of the SELECT statement, sometimes called a mapping or a select-from-where block, is formed of the three clauses SELECT, FROM and WHERE and has the following form:
            SELECT <attribute-list>
            FROM <table-list>
            WHERE <condition>;
                <attribute-list> is a list of attribute names whose values are to be retreived by the query
                <table-list> is a list of relation names required to process the query
                <condition> is a conditional expression that identifies the tuples to be retrieved by the query
        
        -- For every project located in Stafford list the project number, the controlling department number and the department managers last name, address and birthdate.
                SELECT project_no, project_dept_no, last_name, address, date_of_birth
                FROM PROJECT, DEPARTMENT, EMPLOYEE
                WHERE project_dept_no=dept_no AND dept_mgr_ssn=ssn AND location='Stafford'
    
    2. Ambiguous Attribute Names, Aliasing, Renaming and Tuple Variables:
        -- In SQL, the same name can be assigned to attributes of different relations. If this is the case a multitable query refers to two or more attributes with the same name.
        -- In this case, we must qualify the attribut name with the relation name to prevent ambiguity
        -- This is done by prefixing the relation name to the attribute name and seperating the two by a period.
                SELECT Fname, EMPLOYEE.Name, Address
                FROM EMPLOYEE, DEPARTMENT
                WHERE DEPARTMENT.Name = ‘Research’ AND
                      DEPARTMENT.Dnumber = EMPLOYEE.Dnumber;
        -- Ambiguity may also arise for queries that refer to the same relation twice as in the following example.
            For each employee, retrieve the employee’s first and last name and the first and last name of his or her immediate supervisor.
        -- In this case we are requireed to declare alternative relation names E and S, called aliases or tuple variables for the EMPLOYEE reltion.
                SELECT E.Fname, E.Lname, S.Fname, S.Lname
                FROM EMPLOYEE AS E, EMPLOYEE AS S
                WHERE E.Super_ssn = S.Ssn;

    3. Unspecified WHERE clause and the use of Asterisk:
        -- A missing WHERE clause indicates no condition on tuple selection; hence all tuples of the relation specified in the FROM clause qualify and are selected for the query result.
        -- If more than one relation are specified in the FROM clause and there is no WHERE clause, then the CROSS PRODUCT of these relations is selected.
        -- To retrieve all the attribute values of the selected tuples, we do not have to list the attribute names explicitly in SQL; we just specify an asterisk, which stands for all the attributes.
        -- The * can also be prefixed by the relation name or alias EMPLOYEE.*

    4. Tables as SETs in SQL:
        -- SQL usually treats table not as a set but rather as a multiset; duplicates can cappear in a table and in the result of a query.
        -- If we do want to eliminate duplicate tuples from the result of an SQL query, we use the keyword DISTINCT in the SELECT clause, meaning that only distinct tuples should remain in the result.
        -- In general, a query with SELECT DISTINCT eliminates duplicates, whereas a query with SELECT ALL does not.
        -- SQL has directly incorporated some of the set operations from mathematical set theory, which are also part of relational algebra.
        -- There are UNION, EXCEPT and INTERSECT operations.
        -- The relations resulting from th set operations are sets of tuples; that is, duplicate tuples are eliminated from the result.
        -- These set operations apply only to type compatible relations, so we must make sure that the to relations are type compatible.
        -- SQL also has corresponding multiset operations, which are followed by the keyword ALL (UNION ALL, EXCEPT ALL, INTERSECT ALL). Their results are multisets.

    5. Substring Pattern Matching and Arithmetic Operations:
        -- The first feature allows comparison conditions on only parts of a character string, using the LIKE comparison operator.
        -- This can be used for string pattern matching.
        -- Partial strings are specified using two reserved characters:
            % - replaces an arbitrary number of zero or more characters
            _ - replaces by a single character
        -- Example: Find the First and Last name of exmployees whose adress is in Houston, Texas.
            SELECT Fname, Lname
            FROM EMPLOYEE
            WHERE Address LIKE '%Houston, TX%';
        -- If an underscore or % is neede as a literal character in the string, the character should be preceded by an escape character, which is specified after the string using the keyword ESCAPE.
        -- Example: 'AB\_CD\%EF' ESCAPE '\' is equivalent to 'AB_CD%EF'
        -- If an apostrophe (') is needed, it is represented as two consecutive apostrophe('') so that it will not be interpreted as ending the string.
        -- Another feature allows the used of arithmetic in queries. the standard arithmetic operators for addition, subtractionm multiplication and division can be applied to numeric values or attributer ith numeric domains.
        -- For string datatypes, the concatenate operator || can be used in a query to append two string values.
        -- For date time, timestamp and interval data types, operators include incrementing and decrementing by a interval value.
        -- Another operator that can be used for convenience is the BETWEEN operator
        -- <attr> BETWEEN <val1> AND <val2> is equivalent to the condition (<attr> >= <val1>) AND (<attr> <= <val2>)

    6. Ordering of Query Results:
        -- SQL allows the user to order the tuples in the result of a query by the values of one or more of the attributes that appear in the query result, by using the ORDER BY clause
        -- The default order is in ascending order of the values. 
        -- We can specify the the keyword DESC if we want to see the result in an descending order of values.
        -- The keyword ASC can be used to specify ascending explicitly.


INSERT, DELETE and UPDATE:
    INSERT:
        -- In its simplest form, INSERT is used to add a single tuple to a relation.
        -- We must specify the relation name and a list of values for the tuple.
        -- the values should be listed in the same order in which the corresponding attributs were specified in the CREATE TABLE command.

        -- A second form of the INSERT command allows the user to specify explicit attribute names that correspond to the values provided in the INSERT command.
        -- This is used if a relation has many attributes but only a few of those are assigned values in the new tuple.
        -- The values that can be left are the ones that either have a DEFAULT value or can be set NULL.

        -- A variation of the INSERT command inserts multiple tuples into a relation in conjunction with creating a relation and loading it with the result of a query.
        -- EX: Refer Navathe: 230 in the pages field
    
    DELETE:
        -- The DELETE command removes tuples from a relation. It includes a WHERE clause, similar to that used in SQL query, to select the tuples to be deleted.
        -- Tuples are explicitly deleted from only one table at a time. However, the deletion may propagate to tuples in other relation id referential integrity actions are specified.
        -- A missing WHERE clause specifies that all the tuples in the relation are to be deleted; however the table remains in the databse as a empty table.
        -- We must use the DROP TABLE command to remove the table definition.

    UPDATE:
        -- The UPDATE command is used to modify the attribute values of one or more selected tuples.
        -- As in DELETE command, a WHERE clause in the UPDATE command selects the tuples to be modified from a single relation.
        -- However, updating a primarykey may propagate to the foreign key of tuples in other relation if such referential integrity actions are specified.
        -- an additional SET clause in the UPDATE command specifies the attributes to be modified and their new values.





